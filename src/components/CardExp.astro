---
const { puesto, detalles, descripcion, posicion, align, row } = Astro.props
---

<div
	class:list={`sm:col-start-${posicion} animation relative my-8 sm:row-start-${row} ml-16 flex flex-col justify-center sm:mx-10 sm:text-${align}`}
>
	<div
		class:list={[
			"absolute -left-[2.7rem] top-[2rem] z-10 flex h-[3rem] w-[3rem] -translate-x-1/2 transform items-center justify-center rounded-full bg-[#31546a] sm:hidden",
		]}
	>
		<svg
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="icon icon-tabler icon-tabler-briefcase-2"
		>
			<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
			<path
				d="M3 9a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v9a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-9z"
			></path>
			<path d="M8 7v-2a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v2"></path>
		</svg>
	</div>
	<div
		class:list={[
			"absolute top-[2rem] z-10 hidden h-[3rem] w-[3rem] -translate-x-1/2 transform items-center justify-center rounded-full bg-[#31546a] sm:flex",
			posicion === "1" ? "sm:-right-[5.5rem]" : "sm:-left-[2.5rem]",
		]}
	>
		<svg
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="icon icon-tabler icon-tabler-briefcase-2"
		>
			<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
			<path
				d="M3 9a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v9a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-9z"
			></path>
			<path d="M8 7v-2a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v2"></path>
		</svg>
	</div>
	<h3 class="mb-3 text-2xl">{puesto}</h3>
	<span class="text-base text-gray-400">{detalles}</span>
	<p class="mt-3 leading-relaxed text-base text-gray-300">
		{descripcion}
	</p>
</div>

<style>
	.animation {
		opacity: 0;
		transition: opacity 1.5s;
	}

	.scroll-animation {
		opacity: 1;
	}
</style>

<script>
	function setupAnimations() {
		const elementsToAnimate = document.querySelectorAll(".animation")

		const observer = new IntersectionObserver(
			(entries, observer) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						// Agrega la animaciÃ³n cuando el elemento es visible en el viewport
						entry.target.classList.add("scroll-animation")

						// Deja de observar el elemento si ya se ha animado
						observer.unobserve(entry.target)
					}
				})
			},
			{ threshold: 0.8 }
		)

		elementsToAnimate.forEach((element) => {
			observer.observe(element)
		})
	}

	document.addEventListener("DOMContentLoaded", setupAnimations)
</script>
